// We require the Hardhat Runtime Environment explicitly here. This is optional
// but useful for running the script in a standalone fashion through `node <script>`.
//
// When running the script with `npx hardhat run <script>` you'll find the Hardhat
// Runtime Environment's members available in the global scope.
import { ethers } from "hardhat";
import * as fs from 'fs';

async function main() {
  // Hardhat always runs the compile task when running scripts with its command
  // line interface.
  //
  // If this script is run directly using `node` you may want to call compile
  // manually to make sure everything is compiled
  //await hre.run('compile');


  // We get the contract to deploy
  const Contract = await ethers.getContractFactory("EventManagerDOMEv1");


  //const provider = new ethers.providers.JsonRpcProvider("https://red-t.alastria.io/v0/9461d9f4292b41230527d57ee90652a6");
  const wallet = new ethers.Wallet(`${process.env.PRIVATE_KEY}`, ethers.provider);
  //

  let walletAddress = await wallet.getAddress();
  console.log("Deployer Address - " + walletAddress);


  // Read the contract artifact, which was generated by Remix
  const metadata = JSON.parse(fs.readFileSync('artifacts/contracts/EventManagerDOMEv1.sol/EventManagerDOMEv1.json').toString())
  // Set gas limit and gas price, using the default Ropsten provider
  const price = ethers.utils.formatUnits(await ethers.provider.getGasPrice(), 'gwei');
  const options = {gasLimit: 100000, gasPrice: ethers.utils.parseUnits(price, 'gwei')}

  // Deploy the contract

  const factory = new ethers.ContractFactory(metadata.abi, metadata.bytecode, wallet);
  const contract = await factory.deploy();  //options

  let eventManagerDOMEv1 = await contract.deployed();

  console.log("Contract deployed to:", contract.address);

  const ownerAddr = await eventManagerDOMEv1.owner();

  console.log("Contract owner [from owner() function]:", ownerAddr);



}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
